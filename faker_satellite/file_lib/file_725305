<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.12">
<title>Usage Patterns: Frontend Guild</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/* Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment @import statement to use as custom stylesheet */
/*@import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700";*/
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
abbr[title]{border-bottom:1px dotted}
b,strong{font-weight:bold}
dfn{font-style:italic}
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,*::before,*::after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}
abbr{text-transform:none}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}
blockquote cite::before{content:"\2014 \0020"}
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details>summary:first-of-type{cursor:pointer;display:list-item;outline:none;margin-bottom:.75em}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class="paragraph"]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
table.tableblock #preamble>.sectionbody>[class="paragraph"]:first-of-type p{font-size:inherit}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border-style:solid;border-width:1px;border-color:#dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;-webkit-border-radius:4px;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{-webkit-border-radius:4px;border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class="highlight"],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos{border-right:1px solid currentColor;opacity:.35;padding-right:.5em}
pre.pygments .lineno{border-right:1px solid currentColor;opacity:.35;display:inline-block;margin-right:.75em}
pre.pygments .lineno::before{content:"";margin-right:-.125em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all tr,table.stripes-odd tr:nth-of-type(odd),table.stripes-even tr:nth-of-type(even),table.stripes-hover tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
ul.checklist{margin-left:.625em}
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist li>p:first-child>input[type="checkbox"]:first-child{margin-right:.25em}
ul.inline{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}
.gist .file-data>table td.line-data{width:99%}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);-webkit-border-radius:50%;border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media print,amzn-kf8{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<style>
pre.rouge table td { padding: 5px; }
pre.rouge table pre { margin: 0; }
pre.rouge .cm {
  color: #999988;
  font-style: italic;
}
pre.rouge .cp {
  color: #999999;
  font-weight: bold;
}
pre.rouge .c1 {
  color: #999988;
  font-style: italic;
}
pre.rouge .cs {
  color: #999999;
  font-weight: bold;
  font-style: italic;
}
pre.rouge .c, pre.rouge .ch, pre.rouge .cd, pre.rouge .cpf {
  color: #999988;
  font-style: italic;
}
pre.rouge .err {
  color: #a61717;
  background-color: #e3d2d2;
}
pre.rouge .gd {
  color: #000000;
  background-color: #ffdddd;
}
pre.rouge .ge {
  color: #000000;
  font-style: italic;
}
pre.rouge .gr {
  color: #aa0000;
}
pre.rouge .gh {
  color: #999999;
}
pre.rouge .gi {
  color: #000000;
  background-color: #ddffdd;
}
pre.rouge .go {
  color: #888888;
}
pre.rouge .gp {
  color: #555555;
}
pre.rouge .gs {
  font-weight: bold;
}
pre.rouge .gu {
  color: #aaaaaa;
}
pre.rouge .gt {
  color: #aa0000;
}
pre.rouge .kc {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kd {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kn {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kp {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kr {
  color: #000000;
  font-weight: bold;
}
pre.rouge .kt {
  color: #445588;
  font-weight: bold;
}
pre.rouge .k, pre.rouge .kv {
  color: #000000;
  font-weight: bold;
}
pre.rouge .mf {
  color: #009999;
}
pre.rouge .mh {
  color: #009999;
}
pre.rouge .il {
  color: #009999;
}
pre.rouge .mi {
  color: #009999;
}
pre.rouge .mo {
  color: #009999;
}
pre.rouge .m, pre.rouge .mb, pre.rouge .mx {
  color: #009999;
}
pre.rouge .sa {
  color: #000000;
  font-weight: bold;
}
pre.rouge .sb {
  color: #d14;
}
pre.rouge .sc {
  color: #d14;
}
pre.rouge .sd {
  color: #d14;
}
pre.rouge .s2 {
  color: #d14;
}
pre.rouge .se {
  color: #d14;
}
pre.rouge .sh {
  color: #d14;
}
pre.rouge .si {
  color: #d14;
}
pre.rouge .sx {
  color: #d14;
}
pre.rouge .sr {
  color: #009926;
}
pre.rouge .s1 {
  color: #d14;
}
pre.rouge .ss {
  color: #990073;
}
pre.rouge .s, pre.rouge .dl {
  color: #d14;
}
pre.rouge .na {
  color: #008080;
}
pre.rouge .bp {
  color: #999999;
}
pre.rouge .nb {
  color: #0086B3;
}
pre.rouge .nc {
  color: #445588;
  font-weight: bold;
}
pre.rouge .no {
  color: #008080;
}
pre.rouge .nd {
  color: #3c5d5d;
  font-weight: bold;
}
pre.rouge .ni {
  color: #800080;
}
pre.rouge .ne {
  color: #990000;
  font-weight: bold;
}
pre.rouge .nf, pre.rouge .fm {
  color: #990000;
  font-weight: bold;
}
pre.rouge .nl {
  color: #990000;
  font-weight: bold;
}
pre.rouge .nn {
  color: #555555;
}
pre.rouge .nt {
  color: #000080;
}
pre.rouge .vc {
  color: #008080;
}
pre.rouge .vg {
  color: #008080;
}
pre.rouge .vi {
  color: #008080;
}
pre.rouge .nv, pre.rouge .vm {
  color: #008080;
}
pre.rouge .ow {
  color: #000000;
  font-weight: bold;
}
pre.rouge .o {
  color: #000000;
  font-weight: bold;
}
pre.rouge .w {
  color: #bbbbbb;
}
pre.rouge {
  background-color: #f8f8f8;
}
</style>
</head>
<body class="article">
<div id="header">
<h1>Usage Patterns: Frontend Guild</h1>
<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_background">Background</a></li>
<li><a href="#_usage_of_redux">Usage of Redux</a>
<ul class="sectlevel2">
<li><a href="#_when_to_use_redux">When to use redux</a></li>
<li><a href="#_when_not_to_use_redux">When <strong>NOT</strong> to use redux</a></li>
<li><a href="#_store_initialization">Store initialization</a></li>
<li><a href="#_redux_rematch_model_what_is_it">Redux rematch model - what is it</a></li>
<li><a href="#_updating_the_statesynchronously">Updating the state(synchronously)</a></li>
<li><a href="#_updating_the_stateasynchronously">Updating the state(asynchronously)</a></li>
<li><a href="#_state_updates_and_mutations">State updates and mutations</a></li>
<li><a href="#_dispatching_actions">Dispatching actions</a></li>
<li><a href="#_getting_the_result_of_the_effect">Getting the result of the effect</a></li>
<li><a href="#_accessing_the_state">Accessing the state</a></li>
<li><a href="#_why_not_to_use_state_object_directly">Why not to use state object directly</a></li>
<li><a href="#_what_to_test">What to test</a></li>
<li><a href="#_test_example_rematch_model">Test example: rematch model</a></li>
<li><a href="#_test_example_selectors">Test example: selectors</a></li>
<li><a href="#_testing_selectors_that_uses_reselect">Testing selectors that uses reselect</a></li>
</ul>
</li>
<li><a href="#_usage_of_components">Usage of Components</a></li>
<li><a href="#_internationalization_i18n">Internationalization (i18n)</a>
<ul class="sectlevel2">
<li><a href="#_namespaces">Namespaces</a></li>
<li><a href="#_translation_within_source_code">Translation within source code</a></li>
<li><a href="#_interpolation">Interpolation</a></li>
<li><a href="#_plurals">Plurals</a></li>
</ul>
</li>
<li><a href="#_data_management">Data Management</a>
<ul class="sectlevel2">
<li><a href="#_local_storage">Local Storage</a></li>
<li><a href="#_hooks">Hooks</a></li>
<li><a href="#_context">Context</a></li>
<li><a href="#_apollo_cache">Apollo cache</a></li>
<li><a href="#_rematch">Rematch</a></li>
<li><a href="#_tldr_i_need_to_make_a_decision">TL;DR I need to make a decision</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_background">Background</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This document was written using Asciidoc and is intended to house examples of the usage patterns we apply when writing frontend code for the Modern Health platform. It was modeled after the <a href="https://google.github.io/styleguide/jsguide.html">Google JavaScript Style Guide</a>. For more information on Asciidoc there is a quick <a href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/">cheat sheet</a> for syntax.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_usage_of_redux">Usage of Redux</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We are not using redux directly, instead, we are using a wrapper called redux-rematch that simplifies a lot and reduces boilerplate</p>
</div>
<div class="sect2">
<h3 id="_when_to_use_redux">When to use redux</h3>
<div class="ulist">
<ul>
<li>
<p>When you have some kind of resources that should be accessible in different parts of the application, e.g. most likely you’ll need to access user’s information like name, company etc. in various parts of the application so it’s great use case for redux.</p>
</li>
<li>
<p>When you need to cache resources so user won’t see loading indicators after going back to a page that uses those resources or for offline usage so the resources are immediately available after restarting the page or application</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_when_not_to_use_redux">When <strong>NOT</strong> to use redux</h3>
<div class="ulist">
<ul>
<li>
<p>When you don’t need to access state from the outside of the component, use local state in such case</p>
</li>
<li>
<p>When you need to access the state in the children components, pass required information down in props or put in the context if component tree is really really deep</p>
</li>
<li>
<p>When you need to share the state between components but only in the context of particular functionality in the app. Example: there is a set of questions after a video session to rate a provider, those questions are split into 3 separate screens, on the last one you need to send all the answers to the backend. We don’t care about the answers after submitting and answers shouldn’t be cached. In such case you should pass the answers in the navigation event or create context for this specific part of the app.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_store_initialization">Store initialization</h3>
<div class="paragraph">
<p>Init is the only method you need to call to build a fully configured Redux store. You can visit <a href="https://rematch.netlify.app/#/api/reference">API reference</a> to learn more about all configuration parameters that can be used but as a bare minimum it is enough to provide models object.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="k">import</span> <span class="p">{</span> <span class="nx">init</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@rematch/core</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">user</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./userModel</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./countModel</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">init</span><span class="p">({</span>
  <span class="na">models</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">user</span><span class="p">,</span>
    <span class="nx">count</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">store</span><span class="p">;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_redux_rematch_model_what_is_it">Redux rematch model - what is it</h3>
<div class="paragraph">
<p>In order to store information in the store we have to create a <a href="https://rematch.netlify.app/#/api/models?id=models">model</a> that will be responsible for managing it. Every model should contain <span class="red">state</span>, <span class="red">reducers</span> and <span class="red">effects</span> properties.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// redux rematch model that will manage counter information</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">state</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// initial state</span>
  <span class="na">reducers</span><span class="p">:</span>  <span class="p">{</span>

  <span class="p">},</span>
  <span class="na">effects</span><span class="p">:</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">};</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_updating_the_statesynchronously">Updating the state(synchronously)</h3>
<div class="paragraph">
<p>To synchronously update the state you have to use <span class="red">reducers</span>.
Reducer is a function that takes the model’s previous state and a payload, and return the model’s next state.
It should be a pure function relying only on the state and payload arguments to compute the next state.
For code that relies on the “outside world” (impure functions like api calls, etc.), use effects.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// redux rematch model that will manage counter information</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">state</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// initial state</span>
  <span class="na">reducers</span><span class="p">:</span>  <span class="p">{</span>
    <span class="c1">// handle state changes with pure functions</span>
    <span class="na">increment</span><span class="p">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="nx">payload</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">effects</span><span class="p">:</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">};</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_updating_the_stateasynchronously">Updating the state(asynchronously)</h3>
<div class="paragraph">
<p>To asynchronously update the state you have to use <span class="red">effects</span>.
Effects have access to the root state and dispatch function. They allow to handle the world outside of the model. Therefore, they are often used to manage asynchronous actions.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// redux rematch model that will manage counter information</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">state</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// initial state</span>
  <span class="na">reducers</span><span class="p">:</span>  <span class="p">{</span>
    <span class="c1">// handle state changes with pure functions</span>
    <span class="na">increment</span><span class="p">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">state</span> <span class="o">+</span> <span class="nx">payload</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">effects</span><span class="p">:</span> <span class="nx">dispatch</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="c1">// handle state changes with impure functions.</span>
    <span class="c1">// use async/await for async actions</span>
    <span class="k">async</span> <span class="na">incrementAsync</span><span class="p">:</span> <span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">rootState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nx">networkClient</span><span class="p">.</span><span class="nx">someAsyncMethod</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
      <span class="nx">dispatch</span><span class="p">.</span><span class="nx">count</span><span class="p">.</span><span class="nx">increment</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">};</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_state_updates_and_mutations">State updates and mutations</h3>
<div class="paragraph">
<p>One of the main rules of redux is to NOT mutate. That means we have to always return a new object when updating a state instead of modifying its properties directly. Main reason behind this is that redux can easily detect changes and trigger re-renders by simply comparing object’s reference (location in memory) to detect if anything has changed without doing deep comparisons that are more complex and less performant.
However, in our react apps we can modify the object directly without breaking changes detection strategy thanks to usage of immer.js implemented as one of the <a href="https://rematch.netlify.app/#/plugins/immer">redux-rematch plugins</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="nx">reducers</span><span class="p">:</span>  <span class="p">{</span>
  <span class="nl">authenticate</span><span class="p">:</span> <span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">AuthenticationState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">state</span><span class="p">.</span><span class="nx">isAuthenticated</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">state</span><span class="p">.</span><span class="nx">shouldValidateAuthData</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">state</span><span class="p">.</span><span class="nx">isAuthenticating</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

    <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_dispatching_actions">Dispatching actions</h3>
<div class="paragraph">
<p>To dispatch actions(effects/reducers) we have to use dispatch object that is accessible through the store object.
In the React components we can use <span class="red">useDispatch</span> hook to access dispatch object without importing the whole store.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// dispatch reducers actions</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">count/increment</span><span class="dl">'</span><span class="p">,</span> <span class="na">payload</span><span class="p">:</span><span class="mi">1</span> <span class="p">});</span> <span class="c1">// regular dispatch usage</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">.</span><span class="nx">count</span><span class="p">.</span><span class="nx">increment</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// the same as above but with action dispatcher</span>

<span class="c1">// dispatch effects actions</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">count/incrementAsync</span><span class="dl">'</span><span class="p">,</span> <span class="na">payload</span><span class="p">:</span><span class="mi">1</span> <span class="p">});</span> <span class="c1">// regular dispatch usage</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">.</span><span class="nx">count</span><span class="p">.</span><span class="nx">incrementAsync</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// the same as above but with action dispatcher</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_getting_the_result_of_the_effect">Getting the result of the effect</h3>
<div class="paragraph">
<p>For a long time redux-rematch effects didn’t return anything when dispatched so it was hard to get any information back which is especially important in async operations. Fortunately such possibility has been added so right now every effect is returning a promise that can resolve/reject to any value we want.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="kd">const</span> <span class="nx">score</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">.</span><span class="nx">who5</span><span class="p">.</span><span class="nx">submitAssessment</span><span class="p">(</span><span class="nx">answers</span><span class="p">);</span>
<span class="c1">// we can wait for the score that is being calculated on the BE</span>
<span class="c1">// and display it to the user once we receive it in the response</span>
<span class="nx">displayScore</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_the_state">Accessing the state</h3>
<div class="paragraph">
<p>We have 2 main ways to access state object. Which one you should use depends on where you need to access the state:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>In the React component you should use <span class="red">useSelector</span> hook (<a href="https://react-redux.js.org/api/connect">connect</a> in class based components)</p>
</li>
<li>
<p>Outside of the React component you have to use <span class="red">getState</span> function from the store object</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// outside of React component</span>
<span class="kd">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span> <span class="c1">// state that contains all models</span>
<span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">;</span> <span class="c1">// count model state</span>

<span class="c1">// inside React component</span>
<span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(</span><span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="c1">// count model state</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_why_not_to_use_state_object_directly">Why not to use state object directly</h3>
<div class="paragraph">
<p>Instead of using state directly you should create a <span class="red">selector</span> function that accepts state and returns a piece of it because:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>we can define it once, write unit tests and reuse across the application without worrying about typos etc.</p>
</li>
<li>
<p>when we decide to change the model internal structure we will need to make changes only in one place</p>
</li>
<li>
<p>we can easily test components by simply mocking/spying on selector functions instead of having to mock the whole redux state</p>
</li>
<li>
<p>we can use reselect library to create memoized selectors which will improve performance</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// countSelectors.ts</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">getCount</span> <span class="o">=</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">;</span>

<span class="c1">// Counter.tsx</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getCount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./countSelectors</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Counter</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// direct usage</span>
  <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(</span><span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span>

  <span class="c1">// selector usage</span>
  <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(</span><span class="nx">getCount</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">count</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_to_test">What to test</h3>
<div class="ulist">
<div class="title">Selectors:</div>
<ul>
<li>
<p>We should test every selector to make sure that it gives us back exactly what we want to receive. Also, if we would change the internal structure of the model without adjusting selectors then tests would start failing, otherwise it could be hard to detect early</p>
</li>
</ul>
</div>
<div class="ulist">
<div class="title">Rematch model:</div>
<ul>
<li>
<p>Reducers: we should test reducers to make sure that they’re updating the state correctly</p>
</li>
<li>
<p>Effects: we should test effects to make sure that they’re doing what they should be doing e.g. using HTTP service to fetch some data and then calling the reducer with correct payload</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_test_example_rematch_model">Test example: rematch model</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="k">import</span> <span class="p">{</span> <span class="nx">init</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">rematch/core</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">createCountModel</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./countModel</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">countService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./countService</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Count model</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">store</span><span class="p">;</span>
  <span class="c1">// init fresh store before each test</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">defaultState</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// we've created createCountModel function so we can create a model with a different</span>
    <span class="c1">// default state for test purposes</span>
    <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">createCountModel</span><span class="p">(</span><span class="nx">defaultState</span><span class="p">);</span>

    <span class="nx">store</span> <span class="o">=</span> <span class="nx">init</span><span class="p">({</span>
      <span class="na">models</span><span class="p">:</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">},</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">increment reducer updates state correctly</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// make sure that the default value has been initialized correctly</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">().</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="c1">// dispatch action to trigger 'increment' reducer</span>
    <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">.</span><span class="nx">count</span><span class="p">.</span><span class="nx">increment</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="c1">// make sure that increment reducer did update the state correctly</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">().</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">incrementAsync effect updates state correctly</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// imagine that we are using getNumberAsync method to get the number from the backend</span>
    <span class="c1">// so we want to spy on this method to return some number</span>
    <span class="kd">const</span> <span class="nx">getNumberAsyncSpy</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">countService</span><span class="p">,</span> <span class="dl">'</span><span class="s1">getNumberAsync</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">getNumberAsyncSpy</span><span class="p">.</span><span class="nx">mockResolvedValue</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="c1">// make sure that the default value has been initialized correctly</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">().</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="c1">// dispatch action to trigger `incrementAsync' effect</span>
    <span class="k">await</span> <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">.</span><span class="nx">count</span><span class="p">.</span><span class="nx">incrementAsync</span><span class="p">();</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">getNumberAsyncSpy</span><span class="p">).</span><span class="nx">toHaveBeenCalledTimes</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="c1">// make sure that incrementAsync effect did update the state correctly</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">().</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_test_example_selectors">Test example: selectors</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="k">import</span> <span class="p">{</span> <span class="nx">init</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@rematch/core</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">createCountModel</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./countModel</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Count selectors</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">store</span><span class="p">;</span>

  <span class="c1">// init fresh store before each test</span>
  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">defaultState</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="c1">// we've created createCountModel function so we can create a model with a different</span>
    <span class="c1">// default state for test purposes</span>
    <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">createCountModel</span><span class="p">(</span><span class="nx">defaultState</span><span class="p">);</span>

    <span class="nx">store</span> <span class="o">=</span> <span class="nx">init</span><span class="p">({</span>
      <span class="na">models</span><span class="p">:</span> <span class="p">{</span> <span class="nx">count</span> <span class="p">},</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">getCount selector returns correct data</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// make sure that the returned number is correct</span>
    <span class="kd">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">getCount</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">());</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="c1">// we can confidently use `increment' reducer to modify the defaultState</span>
    <span class="c1">// since it's already tested</span>
    <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">.</span><span class="nx">count</span><span class="p">.</span><span class="nx">increment</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">count2</span> <span class="o">=</span> <span class="nx">getCount</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">());</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">count2</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_testing_selectors_that_uses_reselect">Testing selectors that uses reselect</h3>
<div class="paragraph">
<p>When testing a selector that has been built using <span class="red">createSelector</span> function provided by reselect library we can easily provide needed data by simply calling <code>.resultFunc</code>(without having to construct the whole state).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="c1">// Selectors file</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">getFirstName</span> <span class="o">=</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">getAge</span> <span class="o">=</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">getNameWithAge</span> <span class="o">=</span> <span class="nx">createSelector</span><span class="p">(</span>
  <span class="nx">getFirstName</span><span class="p">,</span>
  <span class="nx">getAge</span><span class="p">,</span>
  <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> is </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2"> years old.`</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1">// Tests</span>
<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">getNameWithAge</span><span class="p">.</span><span class="nx">resultFunc</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">,</span> <span class="mi">28</span><span class="p">);</span>

<span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="dl">'</span><span class="s1">John is 28 years old.</span><span class="dl">'</span><span class="p">);</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_usage_of_components">Usage of Components</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://drive.google.com/file/d/1AWM98hKM3vm-Ux7er8YJ5j-u_07F5dVE/view?usp=sharing">Link to Presentation</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_internationalization_i18n">Internationalization (i18n)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We are using the <a href="https://www.i18next.com/">i18next</a> framework for supporting internationalization in our mobile application. These topics were covered in a <a href="https://docs.google.com/presentation/d/1RKEsoKmDURyIfA5zY3poQOlmGJl4BkA6g8mB2qNuhMM/edit#slide=id.g9204ab4110_0_840">presentation to the team</a> in Summer 2020.</p>
</div>
<div class="sect2">
<h3 id="_namespaces">Namespaces</h3>
<div class="ulist">
<ul>
<li>
<p>We define a namespace for each module: one for the common React components and one for navigation.</p>
</li>
<li>
<p>Namespaces are used to avoid having all translations in one single JSON file. They are referenced in the components when specifying your translation key.</p>
</li>
<li>
<p>Translation keys use dot notation and snake case. They are intended to be descriptive of the component, the section of the page or screen, and the text being described.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="images/namespaces.png" alt="Namespaces">
</div>
<div class="title">Figure 1. Example folder structure and translation keys</div>
</div>
<div class="paragraph">
<p>In the below examples, <strong>settings</strong> is the namespace followed by the translation key.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>useTranslation</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="html"><span class="nt">&lt;Text</span> <span class="na">style=</span><span class="s">{styles.titleText}</span><span class="nt">&gt;</span>{t('settings: session_info.upcoming')}<span class="nt">&lt;/Text&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>Trans</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="html"><span class="nt">&lt;Trans</span> <span class="na">ns=</span><span class="s">"settings"</span> <span class="na">i18nkey=</span><span class="s">"session_info.upcoming"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;Text</span> <span class="na">style=</span><span class="s">{styles.appInfoText}</span><span class="nt">&gt;</span>this was the original text<span class="nt">&lt;/Text&gt;</span>
<span class="nt">&lt;/Trans&gt;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_translation_within_source_code">Translation within source code</h3>
<div class="paragraph">
<p>For use inside a component. The output will be a string. It’s the most commonly used mechanism.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="k">import</span> <span class="p">{</span> <span class="nx">useTranslation</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-i18next</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">AreYouSureModal</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span> <span class="nx">FC</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">t</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useTranslation</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">header</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">t</span><span class="p">(</span><span class="dl">'</span><span class="s1">common:are_you_sure_modal.header</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;;</span>
<span class="p">};</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>For use in nested React elements. The output will be a React element. Useful for mingling styles and translation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="k">import</span> <span class="p">{</span> <span class="nx">Trans</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-i18next</span><span class="dl">'</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">LiveCoachingModaloverviewStep</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Trans</span> <span class="na">ns</span><span class="p">=</span><span class="s">"chat"</span> <span class="na">i18nkey</span><span class="p">=</span><span class="s">"live_coaching_modal_overview_step.emergency_text"</span><span class="p">&gt;</span>
	  <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span> <span class="nx">emergencyText</span><span class="si">}</span> <span class="na">onPress</span><span class="p">=</span><span class="si">{</span><span class="nx">onCrisisTextPress</span><span class="p">)</span><span class="o">&gt;</span>
	    <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">[</span><span class="nx">styles</span><span class="p">.</span><span class="nx">emergencyText</span><span class="p">,</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">emergencyTextBold</span><span class="p">]</span><span class="si">}</span><span class="p">&gt;</span>
		  Live Coaching is not a crisis service,
		<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
		<span class="k">if</span> <span class="nx">you</span> <span class="nx">are</span> <span class="nx">experiencing</span> <span class="nx">a</span> <span class="nx">mental</span> <span class="nx">health</span> <span class="nx">emergency</span><span class="p">,</span> <span class="nx">please</span>
		<span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{[</span><span class="nx">styles</span><span class="p">.</span><span class="nx">emergencyText</span><span class="p">,</span> <span class="nx">styles</span><span class="p">.</span> <span class="nx">emergencyTextUnderline</span><span class="p">]}</span><span class="o">&gt;</span><span class="nx">tap</span> <span class="nx">here</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>		<span class="k">for</span> <span class="nx">access</span> <span class="nx">to</span> <span class="nx">local</span> <span class="mi">24</span><span class="o">/</span><span class="mi">7</span> <span class="nx">crisis</span> <span class="nx">information</span><span class="p">.</span>
	  <span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>	<span class="o">&lt;</span><span class="sr">/Trans</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="si">}</span><span class="err">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>For use <strong>outside</strong> React components. The output will be a string.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="k">import</span> <span class="nx">i18n</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">i18next</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">accountExpired</span> <span class="o">=</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="dl">'</span><span class="s1">body.error</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="dl">''</span><span class="p">).</span><span class="nx">includes</span><span class="p">(</span>
  <span class="nx">i18n</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="dl">'</span><span class="s1">authentication:authentication_service.account_expired</span><span class="dl">'</span><span class="p">)</span>
<span class="p">);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_interpolation">Interpolation</h3>
<div class="paragraph">
<p>When a translation key requires variable inputs, you pass a second argument containing your variables.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>useTranslation</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">titleText</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">t</span><span class="p">(</span><span class="dl">'</span><span class="s1">settings: session_info.upcoming</span><span class="dl">'</span><span class="p">)</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>Trans</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="p">&lt;</span><span class="nc">Trans</span> <span class="na">ns</span><span class="p">=</span><span class="s">"settings"</span> <span class="na">i18nkey</span><span class="p">=</span><span class="s">"session_info.upcoming"</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">appInfoText</span><span class="si">}</span><span class="p">&gt;</span>this was the original text<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nc">Trans</span><span class="p">&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For i18n instances</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>return i18n.t('settings: session_info.upcoming'});</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For JSON strings</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>"session_info.upcoming": "Today, {{time}}"</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_plurals">Plurals</h3>
<div class="paragraph">
<p>When a string needs to support plurals (e.g. “1 Upcoming Session” vs “2 Upcoming Sessions”), we have to append the <code>_plural</code> suffix to the end of the translation key and pass in the appropriate arguments.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>useTranslation</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">t</span><span class="p">(</span><span class="dl">'</span><span class="s1">dashboard:Upcoming session</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">sessionsAmount</span> <span class="p">})</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For <code>Trans</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="jsx"><span class="p">&lt;</span><span class="nc">Trans</span> <span class="na">ns</span><span class="p">=</span><span class="s">"dashboard"</span> <span class="na">count</span><span class="p">=</span><span class="si">{</span><span class="nx">sessionsAmount</span><span class="si">}</span> <span class="na">i18nKey</span><span class="p">=</span><span class="s">"sessions_banner upcoming"</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span><span class="si">{</span><span class="p">{</span> <span class="nx">sessions</span> <span class="nx">Amount</span> <span class="p">}</span><span class="si">}</span> Upcoming sessions/Text&gt;
<span class="p">&lt;/</span><span class="nc">Trans</span><span class="p">&gt;</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For i18n instances</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>&lt;Text&gt;{i18n.t('dashboard: Upcoming session', { count: sessionsAmount }) }&lt;/Text&gt;</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>For JSON strings</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>"sessions_banner upcoming": "{{count}} Upcoming session",
"sessions_banner.upcoming-plural": "{{count}} Upcoming sessions",</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_data_management">Data Management</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For the management of data and state of components/the app, these are common tools and their role in a typical React app:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Local storage</strong>: browser state</p>
</li>
<li>
<p><strong>Hooks</strong>: component state</p>
</li>
<li>
<p><strong>Context</strong>: global state</p>
</li>
<li>
<p><strong>Apollo GraphQL cache</strong>: component data state</p>
</li>
<li>
<p><strong>Rematch</strong>: Redux framework, global state</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_local_storage">Local Storage</h3>
<div class="ulist">
<ul>
<li>
<p><strong>Local storage</strong> is an unencrypted key-value store implemented by the browser, accessible via the window object. (<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">docs</a>)</p>
</li>
<li>
<p><strong>Local storage persists across multiple page sessions</strong>—This makes it suitable for FTUX, dismissible announcements.</p>
</li>
<li>
<p><strong>Use sparingly and clean up unused items</strong>—Local storage takes up space that is also shared with session storage (single session-persistent storage) with no built-in TTL.</p>
</li>
<li>
<p><strong>Behavior can differ dependent on the browser</strong>—Because browsers implement local storage, they can implement it specific to their browser. For example, Firefox 45+ limits local storage to 10MB per origin.</p>
</li>
<li>
<p><strong>Manually manage TTLs</strong>—For temporary, time-specific announcements, include an expiry time and where the item is retrieved, check expiry and remove the item. (Or we can make a module to handle this.)</p>
</li>
<li>
<p><strong>Do not put critical settings and secrets in local storage</strong>—Local storage is unencrypted and easily modifiable in browsers. (In Chrome dev tools: Application tab &gt; Storage &gt; Local Storage)</p>
</li>
<li>
<p><strong>Local storage interprets all values as strings</strong>—If you are storing a boolean, instead of checking for <code>false</code>, you will need to check for <code>"false"</code> since values are not converted on retrieval so all values will evaluate as truthy. When storing an object, serialize to JSON before setting the value.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_hooks">Hooks</h3>
<div class="ulist">
<ul>
<li>
<p><strong>Hooks</strong> are used in <a href="https://reactjs.org/docs/components-and-props.html#function-and-class-components">function components</a> to manage state and perform side effects within a component.</p>
</li>
<li>
<p><strong>Opt for making function components over class components</strong>—In previous versions of React, <a href="https://reactjs.org/docs/react-component.html">components were class-based</a> and <a href="https://reactjs.org/docs/react-component.html#the-component-lifecycle">lifecycle functions</a> provided by the component class were used to perform side effects. State was a potentially large object on the component that was updated through an asynchronous <code>setState</code> function. Class components still exist in React, but in most cases, they can be implemented as a function. Hooks cannot be used with class components.</p>
</li>
<li>
<p><strong><code>useState</code>, <code>useEffect</code>, <code>useContext</code>, <code>useRef</code> cover most cases</strong>—There are other hooks that exist for performance optimizations and as alternatives to the 4 basic hooks. (<a href="https://reactjs.org/docs/hooks-reference.html">docs</a>)</p>
</li>
<li>
<p><strong>Provide reasonable initial state values</strong>—Questions to ask: What should the UI look like if data is still loading/the state is unknown? What value would the state be to get there?</p>
</li>
<li>
<p><strong>Opt for simple values/primitives for state—</strong>A component can have multiple state variables which lessens the need for complex objects in state.</p>
</li>
<li>
<p><strong>Consider <code>useReducer</code> for complex state values</strong>—If you need to store a complex object, such as application state that isn&#8217;t ready to be committed, <code>useReducer</code>, which uses the same concept used in Redux, can be used to simplify updates to the state object.</p>
</li>
<li>
<p><strong><code>useEffect</code> can be used to replace lifecycle functions</strong>—In class components, <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code> were primarily used to perform side effects. useEffect simplifies the three lifecycle methods into one method.</p>
</li>
<li>
<p><strong>List all dependencies for <code>useEffect</code>, including functions</strong>—All values declared outside of the <code>useEffect</code> should be listed in the dependency array; <code>useEffect</code> will run every time there is a change to one of the values to ensure the UI reflects the newest state. Most IDEs will hint when a dependency is missing. Functions may have dependencies on other prop/state values not listed in the dependency array, so they should be included.</p>
</li>
<li>
<p><strong>Declaring functions within a <code>useEffect</code> is okay</strong>—If you don&#8217;t want to add a function to the dependency array of a <code>useEffect</code>, consider moving the function inside the useEffect. If it cannot be defined within the useEffect, it probably needs to be listed in the dependency array.</p>
</li>
<li>
<p><strong>Return an empty dependency array for effects on mount/unmount</strong>—The <code>useEffect</code> would be the equivalent of componentDidMount and componentWillUnmount, i.e. perform a side effect when the component renders and clean up the component when it is removed.</p>
</li>
<li>
<p><strong>Declare and clean up subscriptions, listeners, and timers in <code>useEffect</code></strong>—The return value of a <code>useEffect</code> should be a function that implements cleanup of the component, i.e. what should happen when the component is no longer used. To make cleanup easier and code more localized, define the subscriptions/listeners/timers within the <code>useEffect</code> and clean them up in the return value.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_context">Context</h3>
<div class="ulist">
<ul>
<li>
<p><strong>Context</strong> is React&#8217;s built-in optionally global, nestable state management system. A <strong>provider</strong> provides a defined, dynamic value accessible to child components nested inside the provider. A <strong>consumer</strong> fetches values from the provider as long as the consumer is within the component hierarchy of the provider.</p>
</li>
<li>
<p><strong>Use with <code>useContext</code> hook</strong>—Before hooks were implemented in React, consumers were defined within the component where the context was used. <code>useContext</code> simplifies fetching the value.</p>
</li>
<li>
<p><strong>Context should be used sparingly</strong>—https://reactjs.org/docs/context.html[Multiple warnings are included on the official docs] as there are usually other simpler ways of solving problems without a global store, e.g. <a href="https://reactjs.org/docs/context.html#before-you-use-context">changing component composition to avoid prop drilling</a>. Possible use cases include color themes, authenticated user data, preferred language, and other kinds of data that would affect the whole application.</p>
</li>
<li>
<p><strong>Contexts are global for a tree</strong>—This means this could live anywhere from the top level to farther down to the leaf components. Opt for being more conservative regarding which components can access the context. In most cases, data does not need to be shared globally and API calls to fetch data can lead to unnecessary performance hits on the frontend and unnecessary load on the backend. It&#8217;s also easier to expand the scope of a context than to shrink it.</p>
</li>
<li>
<p><strong>Contexts bypass the component lifecycle</strong>—Even if the parent doesn&#8217;t change or re-render, if a context is updated, the consumers will re-render, as well as their children.</p>
</li>
<li>
<p><strong>Contexts make refactoring difficult</strong>—The more globally-scoped a context is, the harder it is to refactor. It means more places where the context could possibly be used, so when a type changes or a property is removed, thorough auditing will be required to ensure nothing breaks.</p>
</li>
<li>
<p><strong>Contexts adds more complexity to component reuse and tests</strong>—When a component consumes a context, the component will require mocking context to test, as opposed to passing in prop values. It also means the component&#8217;s usage will be limited to the context provider&#8217;s tree.</p>
</li>
<li>
<p><strong>Do not pass a JS object as value for a context</strong>—Because context uses reference identity for rendering logic, this can lead to cascading re-renders and drastically affect performance. Pull the object into the parent component&#8217;s state and pass the state to the context provider as the value.</p>
<div class="sidebarblock">
<div class="content">
🌶️  You <strong>probably</strong> don&#8217;t need a context.
</div>
</div>
</li>
<li>
<p>An argument can be made for page-level contexts, depending on how the data is used and updated. Each case would probably warrant a discussion.</p>
</li>
<li>
<p>Heavy use of context can result in unintentional re-renders and performance hits that can be difficult to trace and could have otherwise been avoided.</p>
</li>
<li>
<p><strong>Avoid global state unless absolutely necessary.</strong></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_apollo_cache">Apollo cache</h3>
<div class="ulist">
<ul>
<li>
<p><strong>Apollo Client</strong> is a state management library that is primarily used to interact with GraphQL servers. It includes a <strong>cache</strong> for the data fetched from the remote server that can be accessed and modified locally.</p>
</li>
<li>
<p><strong>Use the <code>useQuery</code> and <code>useMutation</code> hooks</strong>—The HOC and components from Apollo client have been deprecated in favor of using hooks to match updates in React.</p>
</li>
<li>
<p><strong>Use the client provided by the Apollo context</strong>* —To make use the cache, the same Apollo client needs to be used. When using the client provided to the Apollo context, a specific client does not need to be specified in queries/mutations and ensures the same client is being used. However, this is not as straight-forward with multiple GraphQL servers since only one instance of the Apollo client can be used at a given time. (The suggested architecture for GraphQL is a federation layer.)</p>
</li>
<li>
<p><strong>Use the <code>MockedProvider</code> to mock GraphQL data</strong>—The client provides a context provider similar to the context used for interacting with the server. Make sure your variables and data match the test requests exactly; the provider does not handle partial matches and will not return the mock data otherwise.</p>
</li>
<li>
<p><strong>GraphQL data interfaces should match types defined by the schema</strong>—This is to ensure type-safety so all possible cases are covered by the frontend.</p>
</li>
<li>
<p><strong>Include IDs in all objects queries and mutations</strong>—Apollo cache uses <code>id</code> and <code>_id</code> as the primary keys by default. If there is no id provided, specify the primary key in the configuration.</p>
</li>
<li>
<p><strong>Use the Apollo cache to do optimistic updates to the UI</strong>—You can <a href="https://www.apollographql.com/docs/react/performance/optimistic-ui/">mutate the Apollo cache data</a> before a response returns if required, e.g. to render chat messages before they have been delivered.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_rematch">Rematch</h3>
<div class="ulist">
<ul>
<li>
<p><strong>Rematch</strong> is a library built on Redux, another library, which provides a framework that allows for creating multiple global state stores for state management. Redux is an implementation of Flux, which is a pattern introduced by Facebook that encourages one way data-flow using actions and a dispatcher.</p>
</li>
<li>
<p><strong>State is global</strong>—state can be updated and pulled from any component anywhere.</p>
</li>
<li>
<p><strong>It requires actions to update the state</strong>—developers need to define actions for all user interactions that need to fetch data, modify data, and internal things that need to fetch and modify.</p>
</li>
<li>
<p><strong>The shape of state is defined by developers</strong>—state does not necessarily need to match what is in GraphQL and standards need to be set by the developers.</p>
</li>
<li>
<p><strong>Transforming data is defined by developers</strong>—because state does not need to adhere to any specific shape, developers must define logic in reducers to mutate data received to fit the state models.</p>
</li>
<li>
<p><strong>Redux leaves room for interpretation</strong>—the naming of actions and what constitutes as an action can be a philosophical question and different actions can have similar side effects.</p>
</li>
<li>
<p><strong>Redux was created for pre-GraphQL applications</strong>—Redux was made when REST APIs were the standard and needing to piece together data from multiple API endpoints was the norm.</p>
<div class="sidebarblock">
<div class="content">
🌶️    Usage of Redux/Rematch should be minimized and eventually deprecated in favor of newer patterns that are built into React and work better with GraphQL.
</div>
</div>
</li>
<li>
<p>Not all data needs or should be globally available to all components.</p>
</li>
<li>
<p>Source of truth needs to be determined by the developers because similar data can live in multiple places and stores but transformed by different actions.</p>
</li>
<li>
<p>Actions (or lack of actions) can have unexpected consequences due to the nature of global state.</p>
</li>
<li>
<p>useReducer hook exists using the reducer pattern is desired, without the side effect of being globally accessible.</p>
</li>
<li>
<p><strong>Avoid global state unless absolutely necessary.</strong></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_tldr_i_need_to_make_a_decision">TL;DR I need to make a decision</h3>
<div class="paragraph">
<p>You can use this flowchart as a general reference for figuring out what/where data should live.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="images/data-decision-map.png" alt="Best practices decision chart for where to fetch and store data">
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2021-03-29 16:22:13 -0700
</div>
</div>
</body>
</html>